{"text":"Can you write a docstring for this Elixir function name? Elixir.Mix.compilers() <response> Returns the default compilers used by Mix.\n\nIt can be used in your `mix.exs` to prepend or\nappend new compilers to Mix:\n\n    def project do\n      [compilers: Mix.compilers() ++ [:foo, :bar]]\n    end"}
{"text":"Can you write a docstring for this Elixir function name? Elixir.Mix.debug(debug) <response> Sets Mix debug mode."}
{"text":"Can you write a docstring for this Elixir function name? Elixir.Mix.debug?() <response> Returns `true` if Mix is in debug mode, `false` otherwise."}
{"text":"Can you write a docstring for this Elixir function name? Elixir.Mix.env() <response> Returns the current Mix environment.\n\nThis function should not be used at runtime in application code (as opposed\nto infrastructure and build code like Mix tasks). Mix is a build tool and may\nnot be available after the code is compiled (for example in a release).\n\nTo differentiate the program behavior depending on the environment, it is\nrecommended to use application environment through `Application.get_env/3`.\nProper configuration can be set in config files, often per-environment\n(see the `Config` module for more information)."}
{"text":"Can you write a docstring for this Elixir function name? Elixir.Mix.env(env) <response> Changes the current Mix environment to `env`.\n\nBe careful when invoking this function as any project\nconfiguration won't be reloaded.\n\nThis function should not be used at runtime in application code\n(see `env/0` for more information)."}